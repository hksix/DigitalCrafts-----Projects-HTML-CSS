Welcome to Flexbox Froggy, a game where you help Froggy and friends by writing CSS code! Guide this frog to the lilypad on the right by using the justify-content property, which aligns items horizontally and accepts the following values:
justify-content: Aligns items horizontally
    flex-start: Items align to the left side of the container.
    flex-end: Items align to the right side of the container.
    center: Items align at the center of the container.
    space-between: Items display with equal spacing between them.
    space-around: Items display with equal spacing around them.

align-items: Aligns items vertically
    flex-start: Items align to the top of the container.
    flex-end: Items align to the bottom of the container.
    center: Items align at the vertical center of the container.
    baseline: Items display at the baseline of the container.
    stretch: Items are stretched to fit the container.
align-self:


Flex-direction: This CSS property defines the direction items are placed in the container, and accepts the following values:
    row: Items are placed the same as the text direction.
    row-reverse: Items are placed opposite to the text direction.
    column: Items are placed top to bottom.
    column-reverse: Items are placed bottom to top.

Order: changing order of items

Flex-wrap:
    nowrap: Every item is fit to a single line.
    wrap: Items wrap around to additional lines.
    wrap-reverse: Items wrap around to additional lines in reverse.

flex-flow = shorthand for flex-wrap + flex-direction
    This shorthand property accepts the value of one of the two properties separated by a space.
    For example, you can use flex-flow: row wrap to set rows and wrap them.

align-content: You can use align-content to set how multiple lines are spaced apart from each other. Needs multiple lines
    flex-start: Lines are packed at the top of the container.
    flex-end: Lines are packed at the bottom of the container.
    center: Lines are packed at the vertical center of the container.
    space-between: Lines display with equal spacing between them.
    space-around: Lines display with equal spacing around them.
    stretch: Lines are stretched to fit the container

Flex: 0 1 auto; 
    0= flex-grow occupies more space
    1= flex-shrink. how ratio of size based of other growing boxes
    auto= size

@media (min-width: 600px){
    when the min width of the viewport is 600px - this is a if statement that will change based on the code below.
    h1 {
        border: 5px dotted blue;
    }
}